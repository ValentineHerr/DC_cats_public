#make cluster of "cores" cores to run "chains" chains (1 per core)
cl.tmp = makeCluster(rep("localhost",cores), type="SOCK")
registerDoSNOW(cl.tmp)
clusterExport(cl=cl.tmp, list("data", "I.ID", "lam0", "sigma", "gamma", "n.cat", "n.levels", "M1_factor", "M2_factor", "extending_chains"),
envir=environment())
## find out if we are extending the chains or running for the first time
extending_chains <- file.exists(paste0("trSCR_",   paste(blockID[c(1, length(blockID))], collapse = "_") , "_stateList.RData"))
extending_chains
#make cluster of "cores" cores to run "chains" chains (1 per core)
cl.tmp = makeCluster(rep("localhost",cores), type="SOCK")
registerDoSNOW(cl.tmp)
clusterExport(cl=cl.tmp, list("data", "I.ID", "lam0", "sigma", "gamma", "n.cat", "n.levels", "M1_factor", "M2_factor"),
envir=environment())
start.time<-Sys.time()
library(nimble)
source("RandomThinning_Scripts/NimbleModelRT Cats NB Jcov.R")
source("RandomThinning_Scripts/NimbleFunctionsRT Cats NB Jcov.R")
source("RandomThinning_Scripts/init.catRT.df.R")
source('RandomThinning_Scripts/Restart MCMC Functions.R')
set.seed(seeds[c]) #set seed for reproducibility
M1=ceiling(I.ID*16*M1_factor) #Augmentation level for marked.
M2=ceiling(M1/2*M2_factor) #Unmarked individual data augmentation level
M=M1+M2
n.cat=4
inits=list(lam0=lam0,sigma=sigma,gamma=gamma)
#This function structures the simulated data to fit the model in Nimble (some more restructing below)
#Also checks some inits
nimbuild=init.catRT(data,inits,M=M)
gammaMat=nimbuild$gammaMat
G.true.init=nimbuild$G.true
G.true.data=G.true.init*NA
#Trap covariates
covs.trap=model.matrix(~placement_type+distance_to_obstruction_scaled+
distance_to_obstruction_scaled_squared,data=data$J.cov) # no bait
covs.trap=covs.trap[,-c(1)]#remove intercept
#inits for nimble
#full inits. Nimble can initialize psi1 and psi2, but if sigma and lam0 initialized too far away
#from truth, it can stop adapting before convergence and mix very poorly.
Niminits <-
list(
z = rep(1, M),
s = nimbuild$s,
G.true = G.true.init,
ID = nimbuild$ID,
capcounts = rowSums(nimbuild$y.true),
y.true = nimbuild$y.true,
gammaMat = gammaMat,
G.latent = nimbuild$G.latent,
lam0.beta0 = -1.5,
lam0.beta.sex = 0.25,
sigma.beta0 = 4.2,
sigma.beta.sex = 0.2,
thin.beta0 = -1.5,
thin.beta.coat = c(0.25, 3.5, 2, 3.5),
thin.beta.bi = 3.5,
thin.beta.hair = 1.5,
lam0.beta.trap =  c("placement_typeprivate" = 0,
"placement_typepublic" = -3,
"distance_to_obstruction_scaled" = -0.35,
"distance_to_obstruction_scaled_squared" = 0.125)[colnames(covs.trap)], # originally c(0, -3.5, -2, -0.35, 0.125), # private, public forest, public open, dist obstr, dist obstr squared
r = 0.005,
psi = 0.9
)
#constants for Nimble
J=nrow(data$X)
constants<-list(M=M,J=J,K=data$K,K1D=data$K1D,n.samples=nimbuild$n.samples,n.cat=n.cat,n.levels=n.levels,
xlim=data$xlim,ylim=data$ylim,covs.trap=covs.trap, n.trap.cov = ncol(covs.trap))
# Supply data to Nimble. Note, y.true and y.true.event are completely latent.
z.data=c(rep(1,data$n.ID),rep(NA,M-data$n.ID))
Nimdata<-list(y.true=matrix(NA,nrow=M,ncol=J),y.ID=nimbuild$y.ID,
G.true=G.true.data,ID=rep(NA,nimbuild$n.samples),z=z.data,X=as.matrix(data$X),capcounts=rep(NA,M))
# set parameters to monitor
parameters<-c('psi','lam0.beta0','lam0.beta.sex','sigma.beta0','sigma.beta.sex','gammaMat','N','n',
'thin.beta0','thin.beta.coat','thin.beta.bi','thin.beta.hair','lam0.beta.trap','r')
nt=1 #thinning rate
#can also monitor a different set of parameters with a different thinning rate
parameters2 <- c("s","z")
nt2=nt*10 #thinning 10x normal here to reduce posterior file size
# Build the model, configure the mcmc, and compile
start.time<-Sys.time()
Rmodel <- nimbleModel(code=NimModel, constants=constants, data=Nimdata,check=FALSE,
inits=Niminits)
conf <- configureMCMC(Rmodel,monitors=parameters, thin=nt, useConjugacy = TRUE,
nodes=c("z","gammaMat","s","psi",'lam0.beta0','lam0.beta.sex',
'sigma.beta0','sigma.beta.sex','thin.beta0','thin.beta.coat',
'thin.beta.bi','thin.beta.hair','lam0.beta.trap','r'),
monitors2=parameters2,thin2=nt2)
##Here, we remove the default samplers for y.true and y.event, which are not correct
#and replace it with the custom "IDSampler"
conf$removeSampler("y.true")
conf$addSampler(target = paste0("y.true[1:",M,",1:",J,"]"),
type = 'IDSampler',control = list(M=M,J=J,K1D=data$K1D,n.cat=n.cat,
n.samples=nimbuild$n.samples,n.ID=data$n.ID,
this.j=nimbuild$this.j,G.noID=nimbuild$G.noID,
G.latent.ID=nimbuild$G.latent.ID),
silent = TRUE)
#replace default G.true sampler, which is not correct, with custom sampler for G.true, "GSampler"
conf$removeSampler("G.true")
for(i in 1:M){
for(m in 1:n.cat){ #don't need to update first cat bc it is mark status
conf$addSampler(target = paste("G.true[",i,",",m,"]", sep=""),
type = 'GSampler',
control = list(i = i,m=m,M=M,n.cat=n.cat,n.samples=nimbuild$n.samples,
n.levels=n.levels,G.noID=nimbuild$G.noID), silent = TRUE)
}
#replace default activity center sampler that updates x and y locations separately with a joint update
#should be a little more efficient. Slice seems better than block random walk
conf$removeSampler(paste("s[1:",M,", 1:2]", sep=""))
for(i in 1:M){
conf$addSampler(target = paste("s[",i,", 1:2]", sep=""),
type = 'AF_slice',control=list(adaptive=TRUE),silent = TRUE)
}
conf$removeSampler(c("lam0.beta0","sigma.beta0","lam0.beta.sex","sigma.beta.sex"))
conf$addSampler(target = c("lam0.beta0","sigma.beta0","lam0.beta.sex","sigma.beta.sex"),
type = 'AF_slice',
control = list(adaptive=TRUE),
silent = TRUE)
conf$removeSampler(c("lam0.beta.trap"))
conf$addSampler(target = c("lam0.beta.trap"),
type = 'AF_slice',
control = list(adaptive=TRUE),
silent = TRUE)
# Build and compile
Rmcmc <- buildMCMC(conf)
# runMCMC(Rmcmc,niter=1) #this will run in R, used for better debugging
Cmodel <- compileNimble(Rmodel)
Cmcmc <- compileNimble(Rmcmc, project = Rmodel)
if(extending_chains) {
##restore mcmc and sampler states
load(paste0("results/trSCR_",   paste(blockID[c(1, length(blockID))], collapse = "_") , "_stateList.RData"))
modelState <- stateList[[c]]$modelState
mcmcState <- stateList[[c]]$mcmcState
## restore the saved "state" into the new model and new MCMC
setModelState(Cmodel, modelState)
setMCMCstate(conf, Cmcmc, mcmcState)
}
# Run the model.
start.time2<-Sys.time()
Cmcmc$run(100, reset = TRUE)
end.time<-Sys.time()
end.time-start.time  # total time for compilation, replacing samplers, and fitting
end.time-start.time2 # post-compilation run time
# get the first set of monitored parameters
mvSamples = as.matrix(Cmcmc$mvSamples)
# get the second set of monitored parameters (s and z)
mvSamples2 = as.matrix(Cmcmc$mvSamples2)
#save MCMC and sampler states
stateList <- list(modelState = getModelState(Cmodel),
mcmcState = getMCMCstate(conf, Cmcmc))
# get some summary info
summary_results <- data.frame(blockID = paste(blockID, collapse = ", "),
total_time = paste(round(end.time-start.time, 2), units(end.time-start.time)) ,
run_tim = paste(round(end.time-start.time2), units(end.time-start.time2)) ,
area = paste(round(new_area/1000000), "sqkm"),
n_traps = J,
M1,
M2,
M,
n_ID = I.ID,
n_noID = I.noID,
N_total = mean(mvSamples[-c(1:1000),"N"]),
sigma_F  = mean(mvSamples[-c(1:1000),"sigma.beta0"]),
sigma_M  = mean(mvSamples[-c(1:1000),"sigma.beta0"]) + mean(mvSamples[-c(1:1000),"sigma.beta.sex"]),
n_spatial_recaptures = sum(apply(spatial_recaptures, 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_M = sum(apply(spatial_recaptures[G.ID[,3] %in% 2, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_F = sum(apply(spatial_recaptures[G.ID[,3] %in% 1, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_UNK = sum(apply(spatial_recaptures[G.ID[,3] %in% 0, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
placement_type  = deparse(c(colSums(covs.trap[,grepl("place", colnames(covs.trap))]), intercept = nrow(covs.trap) - sum(covs.trap[,grepl("place", colnames(covs.trap))])))[1],
rotation_theta,
D = round(mean(mvSamples[-c(1:1000),"N"])/(new_area/1000000),2)
)
b
# get some summary info
summary_results <- data.frame(blockID = b,
total_time = paste(round(end.time-start.time, 2), units(end.time-start.time)) ,
run_tim = paste(round(end.time-start.time2), units(end.time-start.time2)) ,
area = paste(round(new_area/1000000), "sqkm"),
n_traps = J,
M1,
M2,
M,
n_ID = I.ID,
n_noID = I.noID,
N_total = mean(mvSamples[-c(1:1000),"N"]),
sigma_F  = mean(mvSamples[-c(1:1000),"sigma.beta0"]),
sigma_M  = mean(mvSamples[-c(1:1000),"sigma.beta0"]) + mean(mvSamples[-c(1:1000),"sigma.beta.sex"]),
n_spatial_recaptures = sum(apply(spatial_recaptures, 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_M = sum(apply(spatial_recaptures[G.ID[,3] %in% 2, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_F = sum(apply(spatial_recaptures[G.ID[,3] %in% 1, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_UNK = sum(apply(spatial_recaptures[G.ID[,3] %in% 0, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
placement_type  = deparse(c(colSums(covs.trap[,grepl("place", colnames(covs.trap))]), intercept = nrow(covs.trap) - sum(covs.trap[,grepl("place", colnames(covs.trap))])))[1],
rotation_theta,
D = round(mean(mvSamples[-c(1:1000),"N"])/(new_area/1000000),2)
)
X2
as.matrix(X)
X
data$X
plot(X)
plot(data$X)
range(data$X[,1])
area <- diff(range(data$X[,1])) * diff(range(data$X[,2])))
area
diff(range(data$X[,1])) * diff(range(data$X[,2]))
area <- diff(range(data$X[,1])) * diff(range(data$X[,2]))
summary_results <- data.frame(blockID = b,
total_time = paste(round(end.time-start.time, 2), units(end.time-start.time)) ,
run_tim = paste(round(end.time-start.time2), units(end.time-start.time2)) ,
area = paste(round(area/1000000), "sqkm"),
n_traps = J,
M1,
M2,
M,
n_ID = I.ID,
n_noID = I.noID,
N_total = mean(mvSamples[-c(1:1000),"N"]),
sigma_F  = mean(mvSamples[-c(1:1000),"sigma.beta0"]),
sigma_M  = mean(mvSamples[-c(1:1000),"sigma.beta0"]) + mean(mvSamples[-c(1:1000),"sigma.beta.sex"]),
n_spatial_recaptures = sum(apply(spatial_recaptures, 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_M = sum(apply(spatial_recaptures[G.ID[,3] %in% 2, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_F = sum(apply(spatial_recaptures[G.ID[,3] %in% 1, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_UNK = sum(apply(spatial_recaptures[G.ID[,3] %in% 0, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
placement_type  = deparse(c(colSums(covs.trap[,grepl("place", colnames(covs.trap))]), intercept = nrow(covs.trap) - sum(covs.trap[,grepl("place", colnames(covs.trap))])))[1],
rotation_theta,
D = round(mean(mvSamples[-c(1:1000),"N"])/(area/1000000),2)
)
I.ID
I.noID
data$IDlist
data$y.ID
data$y.noID
dim(data$y.noID)
dim(data$y.ID)
I.ID
area <- diff(range(data$X[,1])) * diff(range(data$X[,2]))
summary_results <- data.frame(blockID = b,
total_time = paste(round(end.time-start.time, 2), units(end.time-start.time)) ,
run_tim = paste(round(end.time-start.time2), units(end.time-start.time2)) ,
area = paste(round(area/1000000), "sqkm"),
n_traps = J,
M1,
M2,
M,
n_ID = I.ID,
n_noID = dim(data$y.noID)[1],
N_total = mean(mvSamples[-c(1:1000),"N"]),
sigma_F  = mean(mvSamples[-c(1:1000),"sigma.beta0"]),
sigma_M  = mean(mvSamples[-c(1:1000),"sigma.beta0"]) + mean(mvSamples[-c(1:1000),"sigma.beta.sex"]),
n_spatial_recaptures = sum(apply(spatial_recaptures, 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_M = sum(apply(spatial_recaptures[G.ID[,3] %in% 2, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_F = sum(apply(spatial_recaptures[G.ID[,3] %in% 1, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_UNK = sum(apply(spatial_recaptures[G.ID[,3] %in% 0, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
placement_type  = deparse(c(colSums(covs.trap[,grepl("place", colnames(covs.trap))]), intercept = nrow(covs.trap) - sum(covs.trap[,grepl("place", colnames(covs.trap))])))[1],
rotation_theta,
D = round(mean(mvSamples[-c(1:1000),"N"])/(area/1000000),2)
)
spatial_recaptures
apply(data$y.ID, c(1,2), sum)
um(apply(apply(data$y.ID, c(1,2), sum), 1, function(x) sum(x>0)) > 1)
sum(apply(apply(data$y.ID, c(1,2), sum), 1, function(x) sum(x>0)) > 1)
summary_results <- data.frame(blockID = b,
total_time = paste(round(end.time-start.time, 2), units(end.time-start.time)) ,
run_tim = paste(round(end.time-start.time2), units(end.time-start.time2)) ,
area = paste(round(area/1000000), "sqkm"),
n_traps = J,
M1,
M2,
M,
n_ID = I.ID,
n_noID = dim(data$y.noID)[1],
N_total = mean(mvSamples[-c(1:1000),"N"]),
sigma_F  = mean(mvSamples[-c(1:1000),"sigma.beta0"]),
sigma_M  = mean(mvSamples[-c(1:1000),"sigma.beta0"]) + mean(mvSamples[-c(1:1000),"sigma.beta.sex"]),
n_spatial_recaptures = sum(apply(apply(data$y.ID, c(1,2), sum), 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_M = sum(apply(apply(data$y.ID, c(1,2), sum)[G.ID[,3] %in% 2, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_F = sum(apply(apply(data$y.ID, c(1,2), sum)[G.ID[,3] %in% 1, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_UNK = sum(apply(apply(data$y.ID, c(1,2), sum)[G.ID[,3] %in% 0, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
placement_type  = deparse(c(colSums(covs.trap[,grepl("place", colnames(covs.trap))]), intercept = nrow(covs.trap) - sum(covs.trap[,grepl("place", colnames(covs.trap))])))[1],
rotation_theta,
D = round(mean(mvSamples[-c(1:1000),"N"])/(area/1000000),2)
)
G.ID
apply(data$y.ID, c(1,2), sum)data$G.ID
data$G.ID
data$G.ID[,3]
summary_results <- data.frame(blockID = b,
total_time = paste(round(end.time-start.time, 2), units(end.time-start.time)) ,
run_tim = paste(round(end.time-start.time2), units(end.time-start.time2)) ,
area = paste(round(area/1000000), "sqkm"),
n_traps = J,
M1,
M2,
M,
n_ID = I.ID,
n_noID = dim(data$y.noID)[1],
N_total = mean(mvSamples[-c(1:1000),"N"]),
sigma_F  = mean(mvSamples[-c(1:1000),"sigma.beta0"]),
sigma_M  = mean(mvSamples[-c(1:1000),"sigma.beta0"]) + mean(mvSamples[-c(1:1000),"sigma.beta.sex"]),
n_spatial_recaptures = sum(apply(apply(data$y.ID, c(1,2), sum), 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_M = sum(apply(apply(data$y.ID, c(1,2), sum)[data$G.ID[,3] %in% 2, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_F = sum(apply(apply(data$y.ID, c(1,2), sum)[data$G.ID[,3] %in% 1, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_UNK = sum(apply(apply(data$y.ID, c(1,2), sum)[data$G.ID[,3] %in% 0, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
placement_type  = deparse(c(colSums(covs.trap[,grepl("place", colnames(covs.trap))]), intercept = nrow(covs.trap) - sum(covs.trap[,grepl("place", colnames(covs.trap))])))[1],
rotation_theta,
D = round(mean(mvSamples[-c(1:1000),"N"])/(area/1000000),2)
)
rotation_theta
summary_results <- data.frame(blockID = b,
total_time = paste(round(end.time-start.time, 2), units(end.time-start.time)) ,
run_tim = paste(round(end.time-start.time2), units(end.time-start.time2)) ,
area = paste(round(area/1000000), "sqkm"),
n_traps = J,
M1,
M2,
M,
n_ID = I.ID,
n_noID = dim(data$y.noID)[1],
N_total = mean(mvSamples[-c(1:1000),"N"]),
sigma_F  = mean(mvSamples[-c(1:1000),"sigma.beta0"]),
sigma_M  = mean(mvSamples[-c(1:1000),"sigma.beta0"]) + mean(mvSamples[-c(1:1000),"sigma.beta.sex"]),
n_spatial_recaptures = sum(apply(apply(data$y.ID, c(1,2), sum), 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_M = sum(apply(apply(data$y.ID, c(1,2), sum)[data$G.ID[,3] %in% 2, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_F = sum(apply(apply(data$y.ID, c(1,2), sum)[data$G.ID[,3] %in% 1, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
n_spatial_recaptures_UNK = sum(apply(apply(data$y.ID, c(1,2), sum)[data$G.ID[,3] %in% 0, , drop = FALSE], 1, function(x) sum(x>0)) > 1),
placement_type  = deparse(c(colSums(covs.trap[,grepl("place", colnames(covs.trap))]), intercept = nrow(covs.trap) - sum(covs.trap[,grepl("place", colnames(covs.trap))])))[1],
# rotation_theta,
D = round(mean(mvSamples[-c(1:1000),"N"])/(area/1000000),2)
)
end.time<-Sys.time()
blockID
c("out", blockID = b, "data", "category_key"), file=gsub(" |, ", "_",  paste0("trSCR_", paste(b, collapse = ", ")
c("out", blockID = b, "data", "category_key")
save(list = c("out", blockID = b, "data", "category_key"), file=gsub(" |, ", "_",  paste0("trSCR_", paste(b, collapse = ", "), "_", paste(round(end.time-start.time, 2), units(end.time-start.time)), ".Rdata")))
# load data ####
all_blocks <- sapply(paste0("data_block", 1:4, ".Rdata"), function(x) mget(load(x)), simplify = F)
list2env(all_blocks[[b]], envir = .GlobalEnv)
save(list = c("out", blockID = b, "data", "category_key"), file=gsub(" |, ", "_",  paste0("trSCR_", paste(b, collapse = ", "), "_", paste(round(end.time-start.time, 2), units(end.time-start.time)), ".Rdata")))
out <- list(summary_results, summary_results, summary_results, summary_results, summary_results)
save(list = c("out", blockID = b, "data", "category_key"), file=gsub(" |, ", "_",  paste0("trSCR_", paste(b, collapse = ", "), "_", paste(round(end.time-start.time, 2), units(end.time-start.time)), ".Rdata")))
category_key
# load data ####
## catID data ####
load("data_for_catID_analyses.RData")
# remove baited traps (easier to deal without them since we are doing things by bits) ####
sites_with_bait_to_remove <- rownames(cam_covs)[cam_covs$bait %in% c("yes")]
camop <- droplevels(camop[!rownames(camop) %in% sites_with_bait_to_remove, ])
usage <-  droplevels(usage[!rownames(usage) %in% sites_with_bait_to_remove, ])
deploys <-  droplevels(deploys[!rownames(deploys) %in% sites_with_bait_to_remove, ])
cam_covs <-   droplevels(cam_covs[!rownames(cam_covs) %in% sites_with_bait_to_remove, ])
all_IDs <- droplevels(all_IDs[!all_IDs$deployment_name %in% sites_with_bait_to_remove, ])
# prepare catSMR-specific objects ####
cats <- all_IDs
## prepare the categorical columns ####
categorical_columns <- c( "Primary_Pattern", "Bicolor", "sex", "Longer_hair")
apply(cats[, categorical_columns], 2, table) # check that this all makes sense (unique categories and UNK and NA)
# replace unknown pattern to 0 and make the category numerical, with 0 corresponding to NA or "UNK"
category_key <- list()
for(v in categorical_columns) {
idx_unk <- is.na(cats[, v]) | cats[,v]%in% "UNK"
cats[idx_unk, v] <- NA
cats[,v] <- as.factor(cats[,v])
category_key[[v]] <- data.frame(IDcovs = 1:nlevels( cats[,v]), value = levels( cats[,v]))
cats[,v] <- as.numeric( cats[,v])
cats[idx_unk, v] <- 0
}
apply(cats[, categorical_columns], 2, table) # check that this all makes sense again (0 are UNK and NAs)
## create IDlist ####
IDlist <- list(n.cat = length(categorical_columns),
IDcovs = lapply(category_key, "[[", 1))
n.cat <- IDlist$n.cat
n.levels <- sapply(IDlist$IDcovs, length)
## prepare gamma ####
# generating phenotype frequencies based on known phenotype
gamma= list()
for(i in categorical_columns){
gamma[[i]]=prop.table(table(cats[, i][cats[, i] !=0]))#generating all equal category level frequencies (ignoring when unknown)
}
# keep a version of all cats ####
all_cats <- cats
# run for all block and by keeping only known cats or not ####
blockID_to_try <- list(
list(blockID = c("HL09", "HL01", "HF18", "HF04", "HL03", "LF01", "LL20", "LH04", "HH01", "HL08", "MF03", "MF07", "MH17", "MH08"),
rotation_theta = 0.87,
GB = 21,
M1_factor = 1.5,
M2_factor = 1.5),
# list( blockID = c("ML10", "LL03", "MF10", "LL18"),
#       rotation_theta = -0.13,
#       GB = 18,
#       M1_factor = 1.5,
#       M2_factor = 1.8),
list( blockID = c("ML24", "ML25", "MH16", "MF01", "MF11", "MH04", "MH02", "MH14", "LH05", "ML13"),
rotation_theta = -0.18,
GB = 18,
M1_factor = 1.3,
M2_factor = 1),
# list( blockID = c("LL04", "LL01", "LL15", "ML29", "ML01"),
# rotation_theta = 0.46,
# GB = 18,
# M1_factor = 1.2,
# M2_factor = 1.2),
list(blockID = c("HF12", "HF06", "HF11", "HF13", "HF10", "HF15", "ML26", "ML11", "ML03", "ML02", "MH18", "MH05", "MH07"),
rotation_theta = -0.14,
GB = 21,
M1_factor = 1.5,
M2_factor = 1.5),
list( blockID = c("LL04", "LL01", "LL15", "ML29", "ML01", "ML10", "LL03", "MF10", "LL18"),
rotation_theta = 0.89,
GB = 18,
M1_factor = 1,
M2_factor = 1)
# list(blockID = unique(substr(rownames(deploys), 1, 4)),
#      rotation_theta = 0.86, # to check
#      GB = 18,
#      M1_factor = 1.5,
#      M2_factor = 1.5)
)
for(b in seq_along(blockID_to_try)) {
list2env(blockID_to_try[[b]], globalenv())
cat("running catSMR on block", paste(blockID, collapse = ", "), "\n")
## go back to original data
cats <- all_cats
# keep only one block ####
cats <- cats[cats$block_id %in% blockID, ] # "HL09" 10 known individuals
## create X ####
X <- deploys[substr(rownames(deploys), 1, 4) %in% blockID, c("X", "Y")] # easting and northing
###  ROTATE deploys (DC) to be more vertical
plot(X, asp = 1)
# rotation_theta=0.89#0.86 for the whole DC area
offsetX=0
offsetY=0
rotation_matrix=matrix(c(cos(rotation_theta),-sin(rotation_theta),sin(rotation_theta),cos(rotation_theta)),byrow=TRUE,ncol=2)
X2=as.matrix(X)%*%rotation_matrix+cbind(rep(offsetX,nrow(X)),rep(offsetY,nrow(X)))
colnames(X2) <- c("X", "Y")
plot(X2, asp =1)
(old_area <- diff(range(X$X)) * diff(range(X$Y)))
(new_area <- diff(range(X2[,1])) * diff(range(X2[,2])))
(old_area-new_area)/old_area*100 # reduced by 30% if looking at all blocks together─
# names(deploys) <- gsub("^X$", "oringinal_X",names(deploys) )
# names(deploys) <- gsub("^Y$", "oringinal_Y",names(deploys) )
# deploys <- cbind(X2, deploys)
X <- X2
## create y... objects ####
## we need a 3D array, I, J, K, I is the number of known cats, or number of obs for unmarked, unk of marked.noID, J number of Traps, K, number of occasions
J = nrow(X) # number of traps
K = ncol(usage) #sum(apply(usage, 2, function(x) all(x ==1))) # number of occasions # because I think catSPIM does not take usage 0 or 1, lets keep the min number of days where all cameras are working
K1D <- rowSums(usage[substr(rownames(usage), 1, 4) %in% blockID,] )
cats <- cats[cats$Occasion <= K, ] # remove data that occurred after K (should be none as we removed in prep script)
I.ID = length(unique(cats$ID[grepl("C", cats$ID)])) # number of IDed obs
I.noID = sum(!grepl("C", cats$ID)) # number of observation non IDed
y.ID <- array(0, dim = c(I.ID, J, K))
y.noID <- array(0, dim = c(I.noID, J, K))
marked_cats_ID <- sort(unique(cats$ID[grepl("C", cats$ID)]))
J_match <- match(cats$deployment_name, rownames(X))
K_match <- cats$Occasion
for(i in  c(1:nrow(cats))) {
if(grepl("C", cats$ID)[i]) y.ID[which(marked_cats_ID %in% cats$cat_id[i]), J_match[i], K_match[i]] <- y.ID[which(marked_cats_ID %in% cats$cat_id[i]), J_match[i], K_match[i]] + 1
if(!grepl("C", cats$ID)[i])    y.noID[which(which(!grepl("C", cats$ID)) %in% i), J_match[i], K_match[i]] <- 1
}
all(apply(y.ID, 1, sum) == table(cats$cat_id[grepl("C", cats$ID)])) # should be TRUE
all(apply(y.noID, 1, sum) == 1) # should be TRUE : one observations per row (each obs has its own JxK matrix)
sum(y.ID) == sum(grepl("C", cats$ID)) # should be TRUE (counts of observations at each JxK)
sum(y.noID) == I.noID # should be TRUE
spatial_recaptures <- apply(y.ID, c(1,2), sum)
inter_block_recatpures <- do.call(rbind, by(t(spatial_recaptures), substr(row.names(X), 1, 4), colSums))
inter_block_recatpures[inter_block_recatpures>0]<- 1
table(apply(inter_block_recatpures, 2, function(x) sum(x>0)))
names(table(cats$cat_id[grepl("C", cats$ID)]))[which(apply(inter_block_recatpures, 2, function(x) sum(x)) > 1)]
table(apply(spatial_recaptures, 1, function(x) sum(x>0)))
## create G.... objects ####
G.ID <- as.matrix(do.call(rbind, by(cats[grepl("C", cats$ID), categorical_columns], cats$cat_id[grepl("C", cats$ID)], unique)))
G.noID <- as.matrix(cats[!grepl("C", cats$ID), categorical_columns])
if(nrow(G.ID) != I.ID | any(rownames(G.ID) != marked_cats_ID)) stop("G.ID is no the same for some of the known cats... unify categorical variables for known cats")
ncol(G.ID) == IDlist$n.cat # should be TRUE
# initialize lam0 ####
lam0 = c(5,3) # (female, male)
# initialize sigma ####
sigma = c(40, 60) # (female, male)
## create buff ####
rough.oSCR.sigma = 110 # to be updated from oSCR (1/2 * sf$mmdm is ~ sigma)
buff = 3 * rough.oSCR.sigma # should be at least 3 sigma
# create Trap detection covariates: a matrix of dimension J x n.trap.cov where each column has the trap covariates ####
J.cov <- cam_covs[rownames(X), c("placement_type", "bait", "distance_to_obstruction_scaled")]
J.cov$distance_to_obstruction_scaled_squared <- J.cov$distance_to_obstruction_scaled^2
# create data ####
data <- list(y.ID = y.ID,
y.noID = y.noID,
G.ID = G.ID,
G.noID = G.noID,
IDlist = IDlist,
X = X,
K = K,
buff = buff,
xlim=c(min(X[,1]),max(X[,1]))+c(-buff,buff),
ylim=c(min(X[,2]),max(X[,2]))+c(-buff,buff),
K1D = K1D,
n.ID = I.ID,
J.cov = J.cov)
save(list = c("data", "I.ID", "lam0", "sigma", "gamma", "n.cat", "n.levels", "M1_factor", "M2_factor", "category_key"), file = paste0("data_block", b, ".Rdata"))
}
b
# load data ####
all_blocks <- sapply(paste0("data_block", 1:4, ".Rdata"), function(x) mget(load(x)), simplify = F)
b = 1
list2env(all_blocks[[b]], envir = .GlobalEnv)
out
save(list = c("out", blockID = b, "data", "category_key"), file=gsub(" |, ", "_",  paste0("trSCR_", paste(b, collapse = ", "), "_", paste(round(end.time-start.time, 2), units(end.time-start.time)), ".Rdata")))
c("out", blockID = b, "data", "category_key")
blockID = b
save(list = c("out", "blockID", "data", "category_key"), file=gsub(" |, ", "_",  paste0("trSCR_", paste(b, collapse = ", "), "_", paste(round(end.time-start.time, 2), units(end.time-start.time)), ".Rdata")))
stopCluster(cl.tmp)
save(list = c("out", "blockID", "data", "category_key"), file=gsub(" |, ", "_",  paste0("trSCR_block", blockID, "_", paste(round(end.time-start.time, 2), units(end.time-start.time)), ".Rdata")))
